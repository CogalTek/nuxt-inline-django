name: CI (Nuxt build + Django collectstatic + Smoke test)

on:
  push:
    branches: [ main ]     # adapte si besoin
  workflow_dispatch: {}

jobs:
  build-and-smoke:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # ---------- Build Nuxt (static export) ----------
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install & Generate (Nuxt)
        working-directory: nuxt-inline
        env:
          # baseURL standard (tu peux ajuster si besoin)
          NUXT_APP_BASE_URL: /
        run: |
          npm ci
          npx nuxi generate

      - name: Sync export → Django static
        run: |
          set -Eeuo pipefail
          OUT="nuxt-inline/.output/public"
          if [ ! -d "$OUT" ] && [ -d "nuxt-inline/dist" ]; then OUT="nuxt-inline/dist"; fi
          mkdir -p django/app/static/nuxt-inline
          rsync -a --delete "$OUT"/ django/app/static/nuxt-inline/

      # ---------- Django: deps + collectstatic ----------
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install Django deps
        working-directory: django
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          # pour le smoke test serveur
          pip install gunicorn whitenoise

      - name: Django checks + collectstatic
        working-directory: django
        env:
          DEV: "0"
          DEBUG: "0"
          STATIC_ROOT: ${{ github.workspace }}/django/static-collect
        run: |
          python manage.py check
          python manage.py migrate --noinput
          python manage.py collectstatic --noinput --clear
          test -f static-collect/nuxt-inline/index.html

      # ---------- Smoke test HTTP (Gunicorn + cURL) ----------
      - name: Smoke test (serve with Gunicorn then curl)
        working-directory: django
        env:
          DEV: "0"
          DEBUG: "0"
          STATIC_ROOT: ${{ github.workspace }}/django/static-collect
          ALLOWED_HOSTS: "127.0.0.1,localhost"   # <- important pour éviter 400
        run: |
          set -Eeuo pipefail

          # 1) Lancer Gunicorn en arrière-plan
          nohup gunicorn mysite.wsgi:application --bind 127.0.0.1:8001 --workers 2 --timeout 60 >/tmp/gunicorn.log 2>&1 &
          GUNI_PID=$!
          echo "Gunicorn PID=$GUNI_PID"

          # 2) Attendre que ça réponde (jusqu'à 30s)
          for i in $(seq 1 60); do
            if curl -fsS http://127.0.0.1:8001/ >/dev/null; then
              echo "App is up after $i checks"
              break
            fi
            sleep 0.5
          done

          # Si ça ne répond toujours pas, montrer les logs et échouer
          if ! curl -fsS http://127.0.0.1:8001/ >/dev/null; then
            echo "❌ App didn't start"
            echo "----- Gunicorn log -----"
            tail -n +1 /tmp/gunicorn.log || true
            exit 1
          fi

          # 3) Récupérer la home et extraire 1 JS + 1 CSS
          curl -fsSL http://127.0.0.1:8001/ -o /tmp/home.html
          JS_URL=$(grep -oE '/static/nuxt-inline/_nuxt/[A-Za-z0-9._/-]+\.js'  /tmp/home.html | head -n1 || true)
          CSS_URL=$(grep -oE '/static/nuxt-inline/_nuxt/[A-Za-z0-9._/-]+\.css' /tmp/home.html | head -n1 || true)

          echo "Asset JS:  ${JS_URL:-<none>}"
          echo "Asset CSS: ${CSS_URL:-<none>}"

          # 4) Si on a trouvé des assets, on vérifie; sinon on loggue un warning mais on laisse passer
          if [ -n "${JS_URL}" ]; then
            curl -fsSI "http://127.0.0.1:8001${JS_URL}"  | tee /tmp/js_headers.txt
            grep -Ei 'content-type: (application/javascript|text/javascript)' /tmp/js_headers.txt >/dev/null || echo "⚠️ CT JS inattendu"
          else
            echo "⚠️ Aucun JS détecté dans la home (vérifie la réécriture /_nuxt -> /static/nuxt-inline/_nuxt)."
          fi

          if [ -n "${CSS_URL}" ]; then
            curl -fsSI "http://127.0.0.1:8001${CSS_URL}" | tee /tmp/css_headers.txt
            grep -Ei 'content-type: text/css' /tmp/css_headers.txt >/dev/null || echo "⚠️ CT CSS inattendu"
          else
            echo "⚠️ Aucun CSS détecté dans la home."
          fi

          # 5) Stopper Gunicorn
          kill $GUNI_PID || true


      # ---------- Artefacts utiles en cas d'échec ----------
      - name: Upload logs & home HTML (on failure)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: smoke-debug
          path: |
            /tmp/gunicorn.log
            /tmp/home.html
            django/static-collect/nuxt-inline/index.html
